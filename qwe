#!/usr/bin/env python3
import subprocess
from collections import OrderedDict
import sys
import os
import json
from os.path import expanduser, commonprefix

def stderr(s):
    sys.stderr.write(s)
    sys.stderr.write('\n')

def read_config(filepath):
    shortcuts = OrderedDict()
    with open(filepath, 'r') as fh:
        for line in fh.readlines():
            stripped_line = line.strip()
            if not stripped_line or stripped_line.startswith('#'):  # skip comments
                continue
            shortcut, command = stripped_line.split(' ', 1)
            shortcuts[shortcut] = command.strip() # remove preceeding spaces
    return shortcuts

def get_shortcut(cmd):
    if cmd.isnumeric():
        shortcut_num = int(cmd)
        min_num, max_num = 1, len(shortcuts)
        if max_num >= shortcut_num >= min_num:
            return list(shortcuts.items())[shortcut_num - 1][1]
        else:
            print('Shortcut number must be between %d and %d.' % (max_num, min_num))
    else:
        return shortcuts.get(cmd)

def execute(cmd, verbose=False):
    if verbose:
        stderr('$ %s' % cmd)
    try:
        subprocess.call(cmd, shell=True)
    except KeyboardInterrupt:
        sys.exit(0)

def error(message):
    print(message)
    sys.exit(1)

gen_bash_completion = '''# Pipe this output into your local bash completion, e.g.:
# qwe --gen-bash-completion >> ~/.bash_completion
#
_qwe() {
    COMPREPLY=( `qwe --auto-complete ${COMP_WORDS[COMP_CWORD]}` )
}
complete -F _qwe qwe
'''

# read shortcuts from config (file or folder)
config_path = expanduser('~/.qwe')
if os.path.isfile(config_path):
    shortcuts = read_config(config_path)
else:
    shortcuts = OrderedDict()
    for filename in sorted(os.listdir(config_path)):
        shortcuts.update(read_config(os.path.join(config_path, filename)))

help_text = '\n'.join([
    '%d %s' % (idx + 1, shortcut)
    for idx, (shortcut, command) in enumerate(shortcuts.items())
])

args = sys.argv[1:]
verbose = False
if len(args):
    if args[0].startswith('-'):
        flag = args.pop(0)
        if flag in ('-v', '--verbose'):
            verbose = True
        elif flag == '--auto-complete':
            if not args:
                print(' '.join(shortcuts.keys()))
                sys.exit(0)
            else:
                to_complete = args.pop(0)
                possible = [s for s in shortcuts.keys() if s.startswith(to_complete)]
                if len(possible) == 1:
                    print(possible[0])
                else:
                    print(' '.join(possible), end='')
            sys.exit(0)
        elif flag == '--gen-bash-completion':
            print(gen_bash_completion)
            sys.exit(0)
        else:
            error('Unknown flag %s' % flag)
    cmd = get_shortcut(args[0])
    if cmd is None:
        print(help_text)
        error('Unknown command %s' % args[0])
    execute(cmd + ' ' + ' '.join(args[1:]), verbose)
else:
    cmd = None
    while cmd is None:
        print(help_text)
        try:
            input_cmd = input('Please select a shortcut: \n').split(' ')
            cmd = get_shortcut(input_cmd[0])
            if cmd is None:
                print('Unknown command %s' % input_cmd)
            else:
                cmd += ' '.join(input_cmd[1:])
        except KeyboardInterrupt:
            sys.exit(0)
    execute(cmd, verbose)
